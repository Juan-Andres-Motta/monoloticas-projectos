# =================================================================
# UNIFIED EVENT-DRIVEN MICROSERVICES DOCKER COMPOSE
# =================================================================
# This configuration runs BFF + all microservices with Pulsar events

services:
  # =================================================================
  # DATABASES
  # =================================================================
  
  campaign-db:
    image: postgres:15-alpine
    container_name: ${CAMPAIGN_DB_CONTAINER}
    environment:
      POSTGRES_DB: ${CAMPAIGN_DB_NAME}
      POSTGRES_USER: ${CAMPAIGN_DB_USER}
      POSTGRES_PASSWORD: ${CAMPAIGN_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - campaign_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${CAMPAIGN_DB_USER} -d ${CAMPAIGN_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices

  tracking-db:
    image: postgres:15-alpine
    container_name: ${TRACKING_DB_CONTAINER}
    environment:
      POSTGRES_DB: ${TRACKING_DB_NAME}
      POSTGRES_USER: ${TRACKING_DB_USER}
      POSTGRES_PASSWORD: ${TRACKING_DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - tracking_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TRACKING_DB_USER} -d ${TRACKING_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices

  commission-db:
    image: postgres:15-alpine
    container_name: ${COMMISSION_DB_CONTAINER}
    environment:
      POSTGRES_DB: ${COMMISSION_DB_NAME}
      POSTGRES_USER: ${COMMISSION_DB_USER}
      POSTGRES_PASSWORD: ${COMMISSION_DB_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - commission_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${COMMISSION_DB_USER} -d ${COMMISSION_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices

  payment-db:
    image: postgres:15-alpine
    container_name: ${PAYMENT_DB_CONTAINER}
    environment:
      POSTGRES_DB: ${PAYMENT_DB_NAME}
      POSTGRES_USER: ${PAYMENT_DB_USER}
      POSTGRES_PASSWORD: ${PAYMENT_DB_PASSWORD}
    ports:
      - "5435:5432"
    volumes:
      - payment_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PAYMENT_DB_USER} -d ${PAYMENT_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices

  # =================================================================
  # BFF - BACKEND FOR FRONTEND
  # =================================================================

  bff-service:
    build:
      context: ./bff
      dockerfile: Dockerfile
    container_name: bff-service
    environment:
      # Service Configuration
      - BFF_SERVICE_PORT=${BFF_SERVICE_PORT}
      - BFF_SERVICE_MODE=${BFF_SERVICE_MODE}
      
      # Pulsar Configuration
      - PULSAR_SERVICE_URL=${PULSAR_SERVICE_URL}
      - PULSAR_TOKEN=${PULSAR_TOKEN}
      - PULSAR_TENANT=${PULSAR_TENANT}
      - PULSAR_NAMESPACE=${PULSAR_NAMESPACE}
      
      # JWT Configuration
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - JWT_REQUIRE_VALIDATION=${JWT_REQUIRE_VALIDATION}
      
      # Logging
      - LOG_LEVEL=${BFF_LOG_LEVEL}
    ports:
      - "${BFF_SERVICE_PORT}:${BFF_SERVICE_PORT}"
    restart: unless-stopped
    command: python -m uvicorn main:app --host 0.0.0.0 --port ${BFF_SERVICE_PORT}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${BFF_SERVICE_PORT}/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - microservices

  # =================================================================
  # EVENT-DRIVEN MICROSERVICES
  # =================================================================

  campaign-service:
    build:
      context: ./campaingn
      dockerfile: Dockerfile
    container_name: campaign-service
    environment:
      # Service Mode
      - CAMPAIGN_SERVICE_MODE=${CAMPAIGN_SERVICE_MODE}
      - CAMPAIGN_SERVICE_PORT=${CAMPAIGN_SERVICE_PORT}
      
      # Database Configuration
      - DATABASE_URL=${CAMPAIGN_DATABASE_URL}
      
      # Pulsar Configuration
      - PULSAR_SERVICE_URL=${PULSAR_SERVICE_URL}
      - PULSAR_TOKEN=${PULSAR_TOKEN}
      - PULSAR_TENANT=${PULSAR_TENANT}
      - PULSAR_NAMESPACE=${PULSAR_NAMESPACE}
      
      # Logging
      - LOG_LEVEL=${CAMPAIGN_LOG_LEVEL}
    ports:
      - "${CAMPAIGN_SERVICE_PORT}:${CAMPAIGN_SERVICE_PORT}"
    depends_on:
      campaign-db:
        condition: service_healthy
    restart: unless-stopped
    command: python main_event_driven.py
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${CAMPAIGN_SERVICE_PORT}/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - microservices

  tracking-service:
    build:
      context: ./tracking
      dockerfile: Dockerfile
    container_name: tracking-service
    environment:
      # Service Mode
      - TRACKING_SERVICE_MODE=${TRACKING_SERVICE_MODE}
      - TRACKING_SERVICE_PORT=${TRACKING_SERVICE_PORT}
      
      # Database Configuration
      - DATABASE_URL=${TRACKING_DATABASE_URL}
      
      # Pulsar Configuration
      - PULSAR_SERVICE_URL=${PULSAR_SERVICE_URL}
      - PULSAR_TOKEN=${PULSAR_TOKEN}
      - PULSAR_TENANT=${PULSAR_TENANT}
      - PULSAR_NAMESPACE=${PULSAR_NAMESPACE}
      
      # Logging
      - LOG_LEVEL=${TRACKING_LOG_LEVEL}
    ports:
      - "${TRACKING_SERVICE_PORT}:${TRACKING_SERVICE_PORT}"
    depends_on:
      tracking-db:
        condition: service_healthy
    restart: unless-stopped
    command: python main_event_driven.py
    networks:
      - microservices

  commission-service:
    build:
      context: ./comission
      dockerfile: Dockerfile
    container_name: commission-service
    environment:
      # Service Mode
      - COMMISSION_SERVICE_MODE=${COMMISSION_SERVICE_MODE}
      - COMMISSION_SERVICE_PORT=${COMMISSION_SERVICE_PORT}
      
      # Database Configuration
      - DATABASE_URL=${COMMISSION_DATABASE_URL}
      
      # Pulsar Configuration
      - PULSAR_SERVICE_URL=${PULSAR_SERVICE_URL}
      - PULSAR_TOKEN=${PULSAR_TOKEN}
      - PULSAR_TENANT=${PULSAR_TENANT}
      - PULSAR_NAMESPACE=${PULSAR_NAMESPACE}
      
      # Logging
      - LOG_LEVEL=${COMMISSION_LOG_LEVEL}
    ports:
      - "${COMMISSION_SERVICE_PORT}:${COMMISSION_SERVICE_PORT}"
    depends_on:
      commission-db:
        condition: service_healthy
    restart: unless-stopped
    command: python main_event_driven.py
    networks:
      - microservices

  payment-service:
    build:
      context: ./payment
      dockerfile: Dockerfile
    container_name: payment-service
    environment:
      # Service Mode
      - PAYMENT_SERVICE_MODE=${PAYMENT_SERVICE_MODE}
      - PAYMENT_SERVICE_PORT=${PAYMENT_SERVICE_PORT}
      
      # Database Configuration
      - DATABASE_URL=${PAYMENT_DATABASE_URL}
      
      # Pulsar Configuration
      - PULSAR_SERVICE_URL=${PULSAR_SERVICE_URL}
      - PULSAR_TOKEN=${PULSAR_TOKEN}
      - PULSAR_TENANT=${PULSAR_TENANT}
      - PULSAR_NAMESPACE=${PULSAR_NAMESPACE}
      
      # Logging
      - LOG_LEVEL=${PAYMENT_LOG_LEVEL}
    ports:
      - "${PAYMENT_SERVICE_PORT}:${PAYMENT_SERVICE_PORT}"
    depends_on:
      payment-db:
        condition: service_healthy
    restart: unless-stopped
    command: python main_event_driven.py
    networks:
      - microservices

  # =================================================================
  # UTILITIES
  # =================================================================

  adminer:
    image: adminer:4.8.1
    container_name: microservices-adminer
    ports:
      - "${ADMINER_PORT}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: ${ADMINER_DEFAULT_SERVER}
      ADMINER_DEFAULT_DB_DRIVER: ${ADMINER_DEFAULT_DB_DRIVER}
    depends_on:
      campaign-db:
        condition: service_healthy
      tracking-db:
        condition: service_healthy
      commission-db:
        condition: service_healthy
      payment-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - microservices

# =================================================================
# DOCKER VOLUMES AND NETWORKS
# =================================================================

volumes:
  campaign_data:
    driver: local
  tracking_data:
    driver: local
  commission_data:
    driver: local
  payment_data:
    driver: local

networks:
  microservices:
    driver: bridge

# =================================================================
# USAGE INSTRUCTIONS
# =================================================================
# 
# Start all services:
# docker-compose up -d
# 
# View logs:
# docker-compose logs -f bff-service
# docker-compose logs -f campaign-service
# 
# Check service health:
# curl http://localhost:8001/health  # BFF
# curl http://localhost:8002/health  # Campaign
# 
# Access database admin:
# http://localhost:9001
# 
# Stop all services:
# docker-compose down
# 
# =================================================================
